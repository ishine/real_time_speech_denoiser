@startuml

title Classes

package readers {
  abstract Reader {
    abstract class to read audio from a device
    +read()
  }

  class MicrophoneReader implements Reader {
    read audio from microphone
  }

  class SocketReader implements Reader {
    read audio from a socket
  }

  class FileReader implements Reader {
    read audio from a file
  }
}

package writers {
  abstract Writer {
    abstract class to get audio from a Reader
    +data_ready(data)
    +wait()
  }

  class SocketWriter implements Writer {
    send audio over socket
  }

  class AudioVisualizer implements Writer {
    nice GUI to show audio waves
  }

  class SpeakerPlayer implements Writer {
    play audio over speakers
  }

  class FileWriter implements Writer {
    save audio to a file
  }

  class ProcessorWriter implements Writer {
    special kind of writer, to process audio
  }
}

Reader ---> Writer
note on link
  listen will call data_ready for every sample block
end note

package processors {
  abstract Processor {
    abstract class to process audio
    +process(data)
    +wait()
  }

  class Splitter implements Processor {
    special kind of processor, to split data to multiple writers
  }

  class Pipeline implements Processor {
    special kind of processor, to call multiple processors
  }

  class Multiplier implements Processor {
    multiply the samples by a constant factor, to increase or decrease volume
  }
}

ProcessorWriter ---> Processor
note on link
  data_ready() will call process() for each sample
end note


@enduml